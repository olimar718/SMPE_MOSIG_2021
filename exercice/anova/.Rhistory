df = read.csv("data/fedora_2021-12-01/measurements_14:37.csv") # load the data from the CSV
# https://www.datanovia.com/en/fr/blog/comment-creer-un-ggplot-contenant-plusieurs-lignes/
df2 <- df %>%
dplyr::select(Size, TimeSeq, TimePar,TimeBuiltIn) %>%
gather(key = "variable", value = "value", -Size)
p <- ggplot(df2, aes(x=Size, y = value, color = variable)) + geom_point() +geom_smooth()
print(p)
df %>% group_by(Size) %>% group_map(~ CI(x=.x$TimeSeq,ci=.95))
df %>% group_by(Size) %>% group_map(~ MY_CI(.x$TimeSeq))
MY_CI <- function(data){
data_mean = mean(data)
std_dev = sd(data)
cat(paste(data_mean-2*(std_dev),"down"))
cat(paste(data_mean,"mean"))
cat(paste(data_mean+2*(std_dev),"up"))
print("")
}
library(dplyr)
library(ggplot2)
library(Rmisc)
library(tidyverse)
df = read.csv("data/fedora_2021-12-01/measurements_14:37.csv") # load the data from the CSV
# https://www.datanovia.com/en/fr/blog/comment-creer-un-ggplot-contenant-plusieurs-lignes/
df2 <- df %>%
dplyr::select(Size, TimeSeq, TimePar,TimeBuiltIn) %>%
gather(key = "variable", value = "value", -Size)
p <- ggplot(df2, aes(x=Size, y = value, color = variable)) + geom_point() +geom_smooth()
print(p)
df %>% group_by(Size) %>% group_map(~ CI(x=.x$TimeSeq,ci=.95))
df %>% group_by(Size) %>% group_map(~ MY_CI(.x$TimeSeq))
MY_CI <- function(data){
data_mean = mean(data)
std_dev = sd(data)
cat(paste(data_mean-2*(std_dev)," down"))
cat(paste(data_mean," mean"))
cat(paste(data_mean+2*(std_dev)," up"))
print("")
}
library(dplyr)
library(ggplot2)
library(Rmisc)
library(tidyverse)
df = read.csv("data/fedora_2021-12-01/measurements_14:37.csv") # load the data from the CSV
# https://www.datanovia.com/en/fr/blog/comment-creer-un-ggplot-contenant-plusieurs-lignes/
df2 <- df %>%
dplyr::select(Size, TimeSeq, TimePar,TimeBuiltIn) %>%
gather(key = "variable", value = "value", -Size)
p <- ggplot(df2, aes(x=Size, y = value, color = variable)) + geom_point() +geom_smooth()
print(p)
df %>% group_by(Size) %>% group_map(~ CI(x=.x$TimeSeq,ci=.95))
df %>% group_by(Size) %>% group_map(~ MY_CI(.x$TimeSeq))
library(dplyr)
library(ggplot2)
library(Rmisc)
library(tidyverse)
df = read.csv("data/fedora_2021-12-01/measurements_14:37.csv") # load the data from the CSV
# https://www.datanovia.com/en/fr/blog/comment-creer-un-ggplot-contenant-plusieurs-lignes/
df2 <- df %>%
dplyr::select(Size, TimeSeq, TimePar,TimeBuiltIn) %>%
ze)
library(dplyr)
library(ggplot2)
library(Rmisc)
library(tidyverse)
df = read.csv("data/fedora_2021-12-01/measurements_14:37.csv") # load the data from the CSV
# https://www.datanovia.com/en/fr/blog/comment-creer-un-ggplot-contenant-plusieurs-lignes/
df2 <- df %>%
dplyr::select(Size, TimeSeq, TimePar,TimeBuiltIn) %>%
ze)
library(dplyr)
library(ggplot2)
library(Rmisc)
library(tidyverse)
df = read.csv("data/fedora_2021-12-01/measurements_14:37.csv") # load the data from the CSV
# https://www.datanovia.com/en/fr/blog/comment-creer-un-ggplot-contenant-plusieurs-lignes/
df2 <- df %>%
dplyr::select(Size, TimeSeq, TimePar,TimeBuiltIn) %>%
gather(key = "variable", value = "value", -Size)
p <- ggplot(df2, aes(x=Size, y = value, color = variable)) + geom_point() +geom_smooth()
print(p)
df %>% group_by(Size) %>% group_map(~ CI(x=.x$TimeSeq,ci=.95))
df %>% group_by(Size) %>% group_map(~ MY_CI(.x$TimeSeq))
MY_CI <- function(data){
data_mean = mean(data)
std_dev = sd(data)
cat(paste(data_mean-2*(std_dev)," down "))
cat(paste(data_mean," mean "))
cat(paste(data_mean+2*(std_dev)," up "))
print("")
}
library(dplyr)
library(ggplot2)
library(Rmisc)
library(tidyverse)
df = read.csv("data/fedora_2021-12-01/measurements_14:37.csv") # load the data from the CSV
# https://www.datanovia.com/en/fr/blog/comment-creer-un-ggplot-contenant-plusieurs-lignes/
df2 <- df %>%
dplyr::select(Size, TimeSeq, TimePar,TimeBuiltIn) %>%
gather(key = "variable", value = "value", -Size)
p <- ggplot(df2, aes(x=Size, y = value, color = variable)) + geom_point() +geom_smooth()
print(p)
df %>% group_by(Size) %>% group_map(~ CI(x=.x$TimeSeq,ci=.95))
df %>% group_by(Size) %>% group_map(~ MY_CI(.x$TimeSeq))
MY_CI <- function(data){
data_mean = mean(data)
std_dev = sd(data)
cat(paste(data_mean-2*(std_dev)," down ")) # substract 2 standart deviations
cat(paste(data_mean," mean "))
cat(paste(data_mean+2*(std_dev)," up "))
}
df %>% group_by(Size) %>% group_map(~ CI(x=.x$TimeSeq,ci=.95))
df %>% group_by(Size) %>% group_map(~ MY_CI(.x$TimeSeq))
df %>% group_by(Size) %>% group_map(~ CI(x=.x$TimePar,ci=.95))
df %>% group_by(Size) %>% group_map(~ MY_CI(.x$TimePar))
df %>% group_by(Size) %>% group_map(~ CI(x=.x$TimeBuiltIn,ci=.95))
df %>% group_by(Size) %>% group_map(~ MY_CI(.x$TimeBuiltIn))
MY_CI <- function(data){
data_mean = mean(data)
std_dev = sd(data)
cat(paste("(",data_mean-2*(std_dev)," down) ")) # substract 2 standart deviations
cat(paste("(",data_mean," mean) "))
cat(paste("(",data_mean+2*(std_dev)," up) "))
}
df %>% group_by(Size) %>% group_map(~ CI(x=.x$TimeSeq,ci=.95))
df %>% group_by(Size) %>% group_map(~ MY_CI(.x$TimeSeq))
df %>% group_by(Size) %>% group_map(~ CI(x=.x$TimePar,ci=.95))
df %>% group_by(Size) %>% group_map(~ MY_CI(.x$TimePar))
df %>% group_by(Size) %>% group_map(~ CI(x=.x$TimeBuiltIn,ci=.95))
df %>% group_by(Size) %>% group_map(~ MY_CI(.x$TimeBuiltIn))
MY_CI <- function(data){
data_mean = mean(data)
std_dev = sd(data)
cat(paste("(",data_mean-2*(std_dev)," down) ")) # substract 2 standart deviations
cat(paste("(",data_mean," mean) "))
cat(paste("(",data_mean+2*(std_dev)," up) "))
print("")
}
df %>% group_by(Size) %>% group_map(~ CI(x=.x$TimeSeq,ci=.95))
df %>% group_by(Size) %>% group_map(~ MY_CI(.x$TimeSeq))
df %>% group_by(Size) %>% group_map(~ CI(x=.x$TimePar,ci=.95))
df %>% group_by(Size) %>% group_map(~ MY_CI(.x$TimePar))
df %>% group_by(Size) %>% group_map(~ CI(x=.x$TimeBuiltIn,ci=.95))
df %>% group_by(Size) %>% group_map(~ MY_CI(.x$TimeBuiltIn))
MY_CI <- function(data){
data_mean = mean(data)
std_dev = sd(data)
return(c(up= data_mean+(std_dev*2),mean=data_mean,down= data_mean-(std_dev*2)))
}
df %>% group_by(Size) %>% group_map(~ CI(x=.x$TimeSeq,ci=.95))
df %>% group_by(Size) %>% group_map(~ MY_CI(.x$TimeSeq))
df %>% group_by(Size) %>% group_map(~ CI(x=.x$TimePar,ci=.95))
df %>% group_by(Size) %>% group_map(~ MY_CI(.x$TimePar))
df %>% group_by(Size) %>% group_map(~ CI(x=.x$TimeBuiltIn,ci=.95))
df %>% group_by(Size) %>% group_map(~ MY_CI(.x$TimeBuiltIn))
MY_CI <- function(data){
data_mean = mean(data)
std_dev = sd(data)
return(c(up= data_mean+(std_dev*2),mean=data_mean,down= data_mean-(std_dev*2)))
}
df %>% group_by(Size) %>% group_map(~ paste("d",CI(x=.x$TimeSeq,ci=.95)))
df %>% group_by(Size) %>% group_map(~ MY_CI(.x$TimeSeq))
df %>% group_by(Size) %>% group_map(~ CI(x=.x$TimePar,ci=.95))
df %>% group_by(Size) %>% group_map(~ MY_CI(.x$TimePar))
df %>% group_by(Size) %>% group_map(~ CI(x=.x$TimeBuiltIn,ci=.95))
df %>% group_by(Size) %>% group_map(~ MY_CI(.x$TimeBuiltIn))
MY_CI <- function(data){
data_mean = mean(data)
std_dev = sd(data)
return(c(up= data_mean+(std_dev*2),mean=data_mean,down= data_mean-(std_dev*2)))
}
df %>% group_by(Size) %>% group_map(~ CI(x=.x$TimeSeq,ci=.95))
df %>% group_by(Size) %>% group_map(~ MY_CI(.x$TimeSeq))
df %>% group_by(Size) %>% group_map(~ CI(x=.x$TimePar,ci=.95))
df %>% group_by(Size) %>% group_map(~ MY_CI(.x$TimePar))
df %>% group_by(Size) %>% group_map(~ CI(x=.x$TimeBuiltIn,ci=.95))
df %>% group_by(Size) %>% group_map(~ MY_CI(.x$TimeBuiltIn))
# Intended for a .95 confidence
MY_CI <- function(data){
data_mean = mean(data)
std_dev = sd(data)
final_mult= std_dev/length(data)
return(c(up= data_mean+(std_dev*2),mean=data_mean,down= data_mean-(std_dev*2)))
}
df %>% group_by(Size) %>% group_map(~ CI(x=.x$TimeSeq,ci=.95))
df %>% group_by(Size) %>% group_map(~ MY_CI(.x$TimeSeq))
df %>% group_by(Size) %>% group_map(~ CI(x=.x$TimePar,ci=.95))
df %>% group_by(Size) %>% group_map(~ MY_CI(.x$TimePar))
df %>% group_by(Size) %>% group_map(~ CI(x=.x$TimeBuiltIn,ci=.95))
df %>% group_by(Size) %>% group_map(~ MY_CI(.x$TimeBuiltIn))
# Intended for a .95 confidence
MY_CI <- function(data){
data_mean = mean(data)
std_dev = sd(data)
final_mult= std_dev/length(data)
return(c(up= data_mean+(final_mult*2),mean=data_mean,down= data_mean-(final_mult*2)))
}
df %>% group_by(Size) %>% group_map(~ CI(x=.x$TimeSeq,ci=.95))
df %>% group_by(Size) %>% group_map(~ MY_CI(.x$TimeSeq))
df %>% group_by(Size) %>% group_map(~ CI(x=.x$TimePar,ci=.95))
df %>% group_by(Size) %>% group_map(~ MY_CI(.x$TimePar))
df %>% group_by(Size) %>% group_map(~ CI(x=.x$TimeBuiltIn,ci=.95))
df %>% group_by(Size) %>% group_map(~ MY_CI(.x$TimeBuiltIn))
# https://www.datanovia.com/en/fr/blog/comment-creer-un-ggplot-contenant-plusieurs-lignes/
df2 <- df %>%
dplyr::select(Size, TimeSeq, TimePar,TimeBuiltIn) %>%
gather(key = "variable", value = "value", -Size)
p <- ggplot(df2, aes(x=Size, y = value, color = variable)) + geom_point() +geom_smooth()
print(p)
df %>% ggplot(aes(x=Size, y=TEMPERATURE)) + geom_point()
df %>% ggplot(aes(x=Size, y=CPU_USAGE)) + geom_point()
df %>% ggplot(aes(x=Size, y=RAM_USAGE)) + geom_point()
df %>% ggplot(aes(x=Size, y=N_PROCESS)) + geom_point()
df %>% ggplot(aes(x=Size, y=TEMPERATURE)) + geom_point()
library(dplyr)
library(ggplot2)
library(Rmisc)
library(tidyverse)
df = read.csv("data/fedora_2021-12-01/measurements_14:37.csv") # load the data from the CSV
df
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(Rmisc)
df
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(Rmisc)
df = read.csv("Subject6_smoking.csv")
compute_confidence_interval_and_plot <- function(smoker_arg,df_arg, title_arg){
alives= df_arg %>% filter(Status == "Alive"& Smoker== smoker_arg) %>% mutate(death_variable=0)
dead= df_arg %>% filter(Status == "Dead"& Smoker== smoker_arg) %>% mutate(death_variable=1)
all_member = rbind(alives,dead)
my_ci= CI(x=all_member$death_variable,ci=0.95)
# inspired by https://app-learninglab.inria.fr/moocrr/gitlab/moocrr-session3/moocrr-reproducibility-study/blob/master/module3/exercice3/paradoxe_de_simpson_par_EC30.Rmd
death_rate<-c(my_ci[2])
label <- c(paste("ci |u| |m| |d|",toString(my_ci)))
bp<-barplot(death_rate,col="orange",ylim=c(0,1),names.arg=label, main=title_arg); box()
arrows(bp,my_ci[1],bp,my_ci[3],lwd=1.5,angle=90,length=0.1,code=3)
}
compute_confidence_interval_and_plot(smoker_arg="Yes",df_arg = df, title_arg="All smokers death rate")
compute_confidence_interval_and_plot(smoker_arg="No",df_arg = df, title_arg="All non smokers death rate")
class1834 = df %>% filter(Age >= 18 & Age < 34)
class3454 = df %>% filter(Age >= 34 & Age < 54)
class5464 = df %>% filter(Age >= 54 & Age < 64)
class64 = df %>% filter(Age >= 64)
mortality_ratio_and_ci <- function(df_arg, title_arg){
compute_confidence_interval_and_plot(smoker_arg="Yes",df_arg = df_arg, title_arg = paste(title_arg,"smokers"))
compute_confidence_interval_and_plot(smoker_arg="No",df_arg = df_arg, title_arg = paste(title_arg,"non smokers"))
}
mortality_ratio_and_ci(class1834,"18 34 age class")
mortality_ratio_and_ci(class3454,"34 54 age class")
mortality_ratio_and_ci(class5464,"54 64 age class")
mortality_ratio_and_ci(class64,"64 + age class")
# TODO confidence interval here as well ?
compute_smoker_ratio <- function(df_arg, title_arg){
smokers= df_arg %>% filter( Smoker== "Yes") %>% mutate(smoker_variable=1)
non_smokers= df_arg %>% filter(Smoker== "No") %>% mutate(smoker_variable=0)
all_member = rbind(smokers,non_smokers)
my_ci= CI(x=all_member$smoker_variable,ci=0.95)
# inspired by https://app-learninglab.inria.fr/moocrr/gitlab/moocrr-session3/moocrr-reproducibility-study/blob/master/module3/exercice3/paradoxe_de_simpson_par_EC30.Rmd
smoker_rate<-c(my_ci[2])
label <- c(paste("ci |u| |m| |d|",toString(my_ci)))
bp<-barplot(smoker_rate,col="orange",ylim=c(0,1),names.arg=label, main=title_arg); box()
arrows(bp,my_ci[1],bp,my_ci[3],lwd=1.5,angle=90,length=0.1,code=3)
}
compute_smoker_ratio(df_arg = df, title_arg = "global ratio of smoker")
compute_smoker_ratio(df_arg = class1834, title_arg = "Ratio of smoker 18 to 34")
compute_smoker_ratio(df_arg = class3454, title_arg = "Ratio of smoker 34 to 54")
compute_smoker_ratio(df_arg = class5464, title_arg = "Ratio of smoker 54 to 64")
compute_smoker_ratio(df_arg = class64,title_arg = "Ratio of smoker 64 +" )
df
#smokers= df %>% filter( Smoker== "Yes") %>% mutate(smoker_variable=1)
#non_smokers= df %>% filter(Smoker== "No") %>% mutate(smoker_variable=0)
#all_member = rbind(smokers,non_smokers)
death=FALSE
death[d$Status=="Dead"] <- 1
#smokers= df %>% filter( Smoker== "Yes") %>% mutate(smoker_variable=1)
#non_smokers= df %>% filter(Smoker== "No") %>% mutate(smoker_variable=0)
#all_member = rbind(smokers,non_smokers)
death=FALSE
death[df$Status=="Dead"] <- 1
death[df$Status=="Alive"] <-0
Age <- d$Age
#smokers= df %>% filter( Smoker== "Yes") %>% mutate(smoker_variable=1)
#non_smokers= df %>% filter(Smoker== "No") %>% mutate(smoker_variable=0)
#all_member = rbind(smokers,non_smokers)
death=FALSE
death[df$Status=="Dead"] <- 1
death[df$Status=="Alive"] <-0
Age <- df$Age
df
smokers= df %>% filter( Smoker== "Yes") %>% mutate(smoker_variable=1)
non_smokers= df %>% filter(Smoker== "No") %>% mutate(smoker_variable=0)
all_member = rbind(smokers,non_smokers)
smokers= df %>% filter( Smoker== "Yes") %>% mutate(smoker_variable=1)
non_smokers= df %>% filter(Smoker== "No") %>% mutate(smoker_variable=0)
all_member = rbind(smokers,non_smokers)
all_member
smokers= df %>% filter( Smoker== "Yes") %>% mutate(death_variabe=1)
non_smokers= df %>% filter(Smoker== "No") %>% mutate(death_variabe=0)
all_member = rbind(smokers,non_smokers)
death1[df$Status=="Dead"]<-1
smokers= df %>% filter( Smoker== "Yes") %>% mutate(death_variabe=1)
non_smokers= df %>% filter(Smoker== "No") %>% mutate(death_variabe=0)
all_member = rbind(smokers,non_smokers)
death1=FALSE
death1[df$Status=="Dead"]<-1
death1
smokers= df %>% filter( Smoker== "Yes") %>% mutate(death_variabe=1)
non_smokers= df %>% filter(Smoker== "No") %>% mutate(death_variabe=0)
all_member = rbind(smokers,non_smokers)
death1=FALSE
death1[df$Status=="Dead"]<-1
death1[df$Status=="Alive"]<-1
death1
smokers= df %>% filter( Smoker== "Yes") %>% mutate(death_variabe=1)
non_smokers= df %>% filter(Smoker== "No") %>% mutate(death_variabe=0)
all_member = rbind(smokers,non_smokers)
death1=FALSE
death1[df$Status=="Dead"]<-1
death1[df$Status=="Alive"]<-0
death1
smokers= df %>% filter( Smoker== "Yes") %>% mutate(death_variabe=1)
non_smokers= df %>% filter(Smoker== "No") %>% mutate(death_variabe=0)
all_member = rbind(smokers,non_smokers)
death1=FALSE
death1[df$Status=="Dead"]=1
death1[df$Status=="Alive"]=0
Age = df$Age
Age
smokers= df %>% filter( Status== "Dead") %>% mutate(death_variabe=1)
non_smokers= df %>% filter(Status== "Alive") %>% mutate(death_variabe=0)
all_member = rbind(smokers,non_smokers)
death1=FALSE
death1[df$Status=="Dead"]=1
death1[df$Status=="Alive"]=0
Age = df$Age
glm(all_member$death_variabe,all_member$Age,family = binomial())
smokers= df %>% filter( Status== "Dead") %>% mutate(death_variabe=1)
non_smokers= df %>% filter(Status== "Alive") %>% mutate(death_variabe=0)
all_member = rbind(smokers,non_smokers)
death1=FALSE
death1[df$Status=="Dead"]=1
death1[df$Status=="Alive"]=0
Age = df$Age
glm(all_member$death_variabe~all_member$Age,family = binomial())
smokers= df %>% filter( Status== "Dead") %>% mutate(death_variabe=1)
non_smokers= df %>% filter(Status== "Alive") %>% mutate(death_variabe=0)
all_member = rbind(smokers,non_smokers)
death1=FALSE
death1[df$Status=="Dead"]=1
death1[df$Status=="Alive"]=0
Age = df$Age
#glm(all_member$death_variabe~all_member$Age,family = binomial())
glm(death1~Age,data=df,family=binomial(logit))
smokers= df %>% filter( Status== "Dead") %>% mutate(death_variabe=1)
non_smokers= df %>% filter(Status== "Alive") %>% mutate(death_variabe=0)
all_member = rbind(smokers,non_smokers)
death1=FALSE
death1[df$Status=="Dead"]=1
death1[df$Status=="Alive"]=0
Age = df$Age
glm(all_member$death_variabe~all_member$Age,family = binomial())
glm(death1~Age,data=df,family=binomial(logit))
smokers= df %>% filter( Status== "Dead") %>% mutate(death_variabe=1)
non_smokers= df %>% filter(Status== "Alive") %>% mutate(death_variabe=0)
all_member = rbind(smokers,non_smokers)
regression = glm(all_member$death_variabe~all_member$Age,family = binomial(link = logit))
regression
smokers= df %>% filter( Status== "Dead") %>% mutate(death_variabe=1)
non_smokers= df %>% filter(Status== "Alive") %>% mutate(death_variabe=0)
all_member = rbind(smokers,non_smokers)
all_smokers = all_member %>% filter(Smoker == "Yes")
regression = glm(all_smokers$death_variabe~all_smokers$Age,family = binomial(link = logit))
regression
exp(cbind(coef(regression), confint(regression)))
setwd("~/git/SMPE_MOSIG_2021/exercice/anova")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
ble <- read.table("ble.txt",header=TRUE,sep=";",dec=".")
ble
ggplot(ble, aes(x=variete,y=rdt))+
geom_boxplot()+
ggtitle("Whisker boxes")+
xlab("")+
ylab("")
anova_variete_phyto <- lm(rdt~variete*phyto,data=ble)
anova_variete_phyto <- lm(rdt~variete*phyto,data=ble)
summary(anova_variete_phyto)
anova_variete_phyto <- lm(rdt~variete*phyto,data=ble)
summary(anova_variete_phyto)
anova(anova_variete_phyto)
ggplot(ble, aes(x=phyro,y=rdt))+
geom_boxplot()+
ggtitle("Whisker boxes")+
xlab("")+
ylab("")
ggplot(ble, aes(x=phyto,y=rdt))+
geom_boxplot()+
ggtitle("Whisker boxes")+
xlab("")+
ylab("")
anova
help(anova)
knitr::opts_chunk$set(echo = TRUE)
myData <- read.table(file = "bats.csv",sep = ";",skip = 3,header = T)
names(myData)
phyto = myData[(myData$Diet==1)]
phyto = myData[(myData$Diet==1),]
phyto = myData[(myData$Diet==1),]
phyto
library(ggplot2)
ggplot(ble, aes(x=BOW,y=BRW))+
geom_point()+
ggtitle("B")+
xlab("")+
ylab("")
library(ggplot2)
ggplot(phyto, aes(x=BOW,y=BRW))+
geom_point()+
ggtitle("B")+
xlab("")+
ylab("")
library(ggplot2)
ggplot(phyto, aes(x=BOW,y=BRW))+
geom_point()+
ggtitle("Brain mass in function of body mass")+
xlab("Body mass")+
ylab("Brain mass")
regression=lm(BRW~BOW,data=phyto)
regression=lm(BRW~BOW,data=phyto)
regression
summary(regression)
anova(regression)
plots(regression$fitted.values,regression$residuals,xlab="",ylab="")
plot(regression$fitted.values,regression$residuals,xlab="",ylab="")
plot(regression$fitted.values,regression$residuals,xlab="Predicted",ylab="Residual")
library(ggplot2)
ggplot(phyto, aes(x=BOW,y=BRW))+
geom_point()+
ggtitle("Brain mass in function of body mass")+
xlab("Body mass grams")+
ylab("Brain mass miligrams")
plot(regression,4)
plot(regression)
which(phyto$BRW>8000)
which(phyto$BRW>8000)
phytobis=phyto[which(phyto$BRW>8000)]
which(phyto$BRW>8000)
phytobis=phyto[which(phyto$BRW>8000)]
regressionbis=lm(BRW~BOW,data=phytobis)
which(phyto$BRW>8000)
phytobis=phyto[which(phyto$BRW>8000)]
regressionbis=lm(BRW ~ BOW,data=phytobis)
which(phyto$BRW>8000)
phytobis=phyto[which(phyto$BRW>8000)]
regressionbis=lm(BRW ~ BOW,data=phytobis)
which(phyto$BRW>8000)
phytobis=phyto[which(phyto$BRW>8000)]
regressionbis=lm(BOW ~ BOW,data=phytobis)
myData <- read.table(file = "bats.csv",sep = ";",skip = 3,header = T)
names(myData)
phyto = myData[(myData$Diet==1),]
summary(regression)
anova(regression)
plot(regression$fitted.values,regression$residuals,xlab="Predicted",ylab="Residual")
which(phyto$BRW>8000)
phytobis=phyto[which(phyto$BRW>8000)]
regressionbis=lm(BOW ~ BOW,data=phyto)
summary(regressionbis)
which(phyto$BRW>8000)
phytobis=phyto[which(phyto$BRW>8000),]
regressionbis=lm(BOW ~ BOW,data=phytobis)
summary(regressionbis)
which(phyto$BRW>8000)
phytobis=phyto[which(phyto$BRW>8000),]
regressionbis=lm(BRW ~ BOW,data=phytobis)
summary(regressionbis)
which(phyto$BRW>8000)
phytobis=phyto[which(phyto$BRW>8000),]
regressionbis=lm(BRW ~ BOW,data=phyto)
summary(regressionbis)
which(phyto$BRW>8000)
phytobis=phyto[which(phyto$BRW>8000),]
regressionbis=lm(BRW ~ BOW,data=phytobis)
summary(regressionbis)
phytobis=phyto[which(phyto$BRW<8000),]
regressionbis=lm(BRW ~ BOW,data=phytobis)
summary(regressionbis)
par(mfcol=c(2,2))
par(mfcol=c(2,2))
plot(regression)
plot(regression2)
par(mfcol=c(2,2))
plot(regression)
plot(regressionbis)
phytoNum=phyto[,c(4:8)]
mat.cor=cor(phytoNum)
corrplot(mat.cor, type= "upper")
library(corrplot)
library(corrplot)
phytoNum=phyto[,c(4:8)]
mat.cor=cor(phytoNum)
corrplot(mat.cor, type= "upper")
cor.test(phyto$BRW,phyto$HIP)
cor.test(phyto$BRW,phyto$HIP)
cor.test(phyto$BRW,phyto$MOB)
cor.test(phyto$BRW,phyto$AUD)
regm=lm(BRW~AUD+MOB+HIP,data=phytobis)
summary(regm)
anova(regm)
